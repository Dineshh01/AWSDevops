---

- name: Update Samsung SSD 980 PRO Firmware
  hosts: all
  serial: 1
  become: yes

  tasks:

    - name: Check if mariadb service is active
      ansible.builtin.command: systemctl is-active mariadb
      register: mariadb_status
      ignore_errors: yes

    - name: Stop mariadb service if active
      ansible.builtin.command: systemctl stop mariadb
      when: "'active' in mariadb_status.stdout"

    - name: Check if ProxySQL service is active
      ansible.builtin.command: systemctl is-active proxysql
      register: proxysql_status
      ignore_errors: yes

    - name: Stop Proxysql service if active
      ansible.builtin.command: systemctl stop proxysql
      when: "'active' in proxysql_status.stdout"

    - name: Check if dbaas-consul.service is active
      ansible.builtin.command: systemctl is-active dbaas-consul.service
      register: dbaas-consul.service_status
      ignore_errors: yes

    - name: Stop dbaas-consul.service if active
      ansible.builtin.command: systemctl stop dbaas-consul.service
      when: "'active' in dbaas-consul.service_status.stdout"

    - name: Check if dbaas-mysql_exporter.service is active
      ansible.builtin.command: systemctl is-active dbaas-mysql_exporter.service
      register: dbaas-mysql_exporter.service_status
      ignore_errors: yes

    - name: Stop dbaas-mysql_exporter.service if active
      ansible.builtin.command: systemctl stop dbaas-mysql_exporter.service
      when: "'active' in dbaas-mysql_exporter.service_status.stdout"

    - name: Check if dbaas-proxy_exporter.service is active
      ansible.builtin.command: systemctl is-active dbaas-proxy_exporter.service
      register: dbaas-proxy_exporter.service_status
      ignore_errors: yes

    - name: Stop dbaas-proxy_exporter.service if active
      ansible.builtin.command: systemctl stop dbaas-proxy_exporter.service
      when: "'active' in dbaas-proxy_exporter.service_status.stdout"

    - name: Check if dbaas-service-control.service is active
      ansible.builtin.command: systemctl is-active dbaas-service-control.service
      register: dbaas-service-control.service_status
      ignore_errors: yes

    - name: INstall nvme-cli if its not installed already
      apt:
        name: nvme-cli
        state: present

    - name: Set HTTP Proxy Environment Variable
      ansible.builtin.shell: "export https_proxy=http://pkg.proxy.prod.jp.local:10080"
      environment:
        https_proxy: "http://pkg.proxy.prod.jp.local:10080"

    - name: Download Samsung SSD 980 PRO Firmware ISO
      ansible.builtin.get_url:
        url: "https://semiconductor.samsung.com/resources/software-resources/Samsung_SSD_980_PRO_5B2QGXA7.iso"
        dest: "/tmp/Samsung_SSD_980_PRO_5B2QGXA7.iso"

    - name: Create Firmware Directory
      ansible.builtin.file:
        path: "/tmp/Samsung_SSD_980_PRO_firmware"
        state: directory

    - name: Mount ISO Image
      ansible.builtin.mount:
        src: "/tmp/Samsung_SSD_980_PRO_5B2QGXA7.iso"
        path: "/tmp/Samsung_SSD_980_PRO_firmware"
        fstype: iso9660
        state: mounted
        opts: loop

    - name: Create Temporary Directory
      ansible.builtin.file:
        path: "/tmp/_temp_dir"
        state: directory

    - name: Copy initrd File to Remote Server
      ansible.builtin.copy:
        src: "/tmp/Samsung_SSD_980_PRO_firmware/initrd"
        dest: "/tmp/_temp_dir/initrd"

    - name: Extract initrd
      ansible.builtin.command: "zcat /tmp/_temp_dir/initrd | cpio -i -c"
      args:
        chdir: "/tmp/_temp_dir"
      become_user: root

    - name: Install unzip Package
      ansible.builtin.yum:
        name: unzip
        state: present

    - name: Run fumagician
      ansible.builtin.command: "root/fumagician/fumagician 2> root/fumagician/log"
      args:
        chdir: "/tmp/_temp_dir"
      become_user: root
      async: 3600
      poll: 0
      no_log: true
      when: user_confirmation.user_input == 'Y'

    - name: Reboot the server
      ansible.builtin.reboot:
        reboot_timeout: 300
      async: 120
      poll: 0
      become: yes

    - name: ping the server
      ansible.builtin.ping:

    - name: Perform final tasks
      debug:
        msg: "Server {{ inventory_hostname }} is up and can be accessed."

    - name: Fail if firmware update failed
      fail:
        msg: "Firmware update failed. Check logs for details."
      when: firmware_update_result.rc != 0

    - name: Check firmware version
      ansible.builtin.command: "nvme --list"
      args:
        chdir: "/tmp/"
      when: inventory_hostname in groups['QAServers']
      register: firmware_version_output    
    
    - name: Start MariaDB
      ansible.builtin.systemd:
        name: mariadb
        state: started
      ignore_errors: yes

    - name: Start ProxySQL
      ansible.builtin.systemd:
        name: proxysql
        state: started
      ignore_errors: yes  
